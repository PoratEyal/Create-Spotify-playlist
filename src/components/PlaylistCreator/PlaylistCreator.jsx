// src/components/PlaylistCreator/PlaylistCreator.jsx
import React, { useState, useEffect } from "react";
import { getSpotifyToken, loginToSpotify, createPlaylist } from "../../services/spotifyService";
import { getPlaylistFromOpenAI } from "../../services/openAiService";

import LoginSection from "../LoginSection/LoginSection";
import PlaylistForm from "../PlaylistForm/PlaylistForm";

import styles from "./PlaylistCreator.module.css";

const PlaylistCreator = () => {
  const [prompt, setPrompt] = useState("");
  const [spotifyToken, setSpotifyToken] = useState(null);
  const [playlistLink, setPlaylistLink] = useState(null);
  const [loading, setLoading] = useState(false);

  // Check if we already have a Spotify token in the URL hash
  useEffect(() => {
    const token = getSpotifyToken();
    if (token) {
      setSpotifyToken(token);
    }
  }, []);

  const handleCreatePlaylist = async () => {
    if (!prompt) {
      alert("Please enter a description for the playlist.");
      return;
    }
    if (!spotifyToken) {
      alert("Please log in to Spotify first.");
      return;
    }

    setLoading(true);
    setPlaylistLink(null);

    try {
      // 1. Get the songs from OpenAI
      const songs = await getPlaylistFromOpenAI(prompt);

      // 2. Fetch user info from Spotify
      const userRes = await fetch("https://api.spotify.com/v1/me", {
        headers: {
          Authorization: `Bearer ${spotifyToken}`,
        },
      });
      if (!userRes.ok) {
        alert("Failed to fetch Spotify user data.");
        return;
      }
      const userData = await userRes.json();

      // 3. Create playlist
      const playlistUrl = await createPlaylist(
        spotifyToken,
        userData.id,
        `Playlist: ${prompt}`,
        "Generated by OpenAI",
        songs
      );
      setPlaylistLink(playlistUrl);
    } catch (error) {
      alert("An error occurred while creating the playlist.");
    } finally {
      setLoading(false);
    }
  };

  if (!spotifyToken) {
    // If user has no token, show the login section
    return (
      <div
        className={`${styles.playlistCreator} ${styles.playlistCreatorTransparent}`}
      >
        <LoginSection onLoginClick={loginToSpotify} />
      </div>
    );
  }

  // If user is logged in, show the playlist creation form
  return (
    <div className={styles.playlistCreator}>
      <PlaylistForm
        prompt={prompt}
        onPromptChange={(e) => setPrompt(e.target.value)}
        loading={loading}
        onCreatePlaylist={handleCreatePlaylist}
        playlistLink={playlistLink}
      />
    </div>
  );
};

export default PlaylistCreator;
