// src/components/PlaylistCreator/PlaylistCreator.jsx
import React, { useState, useEffect } from "react";
import {
  getSpotifyToken,
  loginToSpotify,
  createPlaylist,
} from "../../services/spotifyService";
import { getPlaylistFromOpenAI } from "../../services/openAiService";

import LoginSection from "../LoginSection/LoginSection";
import PlaylistForm from "../PlaylistForm/PlaylistForm";

const PlaylistCreator = () => {
  const [prompt, setPrompt] = useState("");
  const [spotifyToken, setSpotifyToken] = useState(null);
  const [playlistLink, setPlaylistLink] = useState(null);
  const [loading, setLoading] = useState(false);

  // --- DEBUG-RELATED STATES ---
  const [userData, setUserData] = useState(null);   // full user info from Spotify
  const [errorMessage, setErrorMessage] = useState(null);
  const [logs, setLogs] = useState([]);

  // Check if we already have a Spotify token in the URL hash
  useEffect(() => {
    const token = getSpotifyToken();
    if (token) {
      setSpotifyToken(token);
      setLogs((prev) => [...prev, "Spotify token found in hash."]);
    } else {
      setLogs((prev) => [...prev, "No token in hash. User not logged in."]);
    }
  }, []);

  const handleCreatePlaylist = async () => {
    if (!prompt) {
      alert("Please enter a description for the playlist.");
      return;
    }
    if (!spotifyToken) {
      alert("Please log in to Spotify first.");
      return;
    }

    setLoading(true);
    setPlaylistLink(null);
    setErrorMessage(null);
    setLogs((prev) => [...prev, "Creating playlist with prompt: " + prompt]);

    try {
      // 1. Get the songs from OpenAI
      const songs = await getPlaylistFromOpenAI(prompt);
      setLogs((prev) => [...prev, `Retrieved ${songs.length} songs from OpenAI.`]);

      // 2. Fetch user info from Spotify
      const userRes = await fetch("https://api.spotify.com/v1/me", {
        headers: {
          Authorization: `Bearer ${spotifyToken}`,
        },
      });

      if (!userRes.ok) {
        const text = await userRes.text();
        setErrorMessage(`Failed to fetch Spotify user data. ${text}`);
        setLogs((prev) => [...prev, "Failed to fetch user data: " + text]);
        return; // Stop here
      }

      const userJson = await userRes.json();
      setUserData(userJson);
      setLogs((prev) => [...prev, "User data fetched: " + JSON.stringify(userJson)]);

      // 3. Create playlist
      const playlistUrl = await createPlaylist(
        spotifyToken,
        userJson.id,
        `Playlist: ${prompt}`,
        "Generated by OpenAI",
        songs
      );
      setPlaylistLink(playlistUrl);
      setLogs((prev) => [...prev, "Created playlist at " + playlistUrl]);
    } catch (error) {
      console.error(error);
      setErrorMessage(error.toString());
      setLogs((prev) => [...prev, "Error: " + error.toString()]);
    } finally {
      setLoading(false);
    }
  };

  if (!spotifyToken) {
    // If user has no token, show the login section
    return <LoginSection onLoginClick={loginToSpotify} />;
  }

  // If user is logged in, show the playlist creation form
  return (
    <PlaylistForm
      prompt={prompt}
      onPromptChange={(e) => setPrompt(e.target.value)}
      loading={loading}
      onCreatePlaylist={handleCreatePlaylist}
      playlistLink={playlistLink}

      // Pass our debug info to the form
      userData={userData}
      spotifyToken={spotifyToken}
      errorMessage={errorMessage}
      logs={logs}
    />
  );
};

export default PlaylistCreator;
